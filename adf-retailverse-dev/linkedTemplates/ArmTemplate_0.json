{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-retailverse-dev"
		},
		"ls_adlsgen2_bronze_sink_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_bronze_sink'"
		},
		"ls_adlsgen2_retailverse_dev_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_adlsgen2_retailverse_dev'"
		},
		"ls_retailverse_databrick_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'ls_retailverse_databrick'"
		},
		"ls_sql_retailverse_metadata_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_sql_retailverse_metadata'"
		},
		"ls_adlsgen2_bronze_sink_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://retailversestg.dfs.core.windows.net/"
		},
		"ls_adlsgen2_retailverse_dev_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://retailversestg.dfs.core.windows.net/"
		},
		"ls_retailverse_databrick_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0526-153108-vqlwzny0"
		},
		"ls_sql_retailverse_metadata_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-retailverse-dev-server.database.windows.net"
		},
		"ls_sql_retailverse_metadata_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "retailverse_metadata_db"
		},
		"ls_sql_retailverse_metadata_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "retailadmin"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_retailverse_placeholder_init')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is a placeholder pipeline for the RetailVerse project.\nUsed to Validate Git Integration and follow industry-grade standards.\nWill be replaced or expanded with real logic in later phases.",
				"activities": [
					{
						"name": "wait_5_seconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"[[\"init\", \"placeholder\", \"retailverse\"]"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2_bronze_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service provides Azure Data Factory secure connectivity to the Bronze-level Azure Data Lake Storage Gen2 container within the RetailVerse projectâ€™s development environment. It enables data landing and staging in the bronze container, serving as the initial persistent storage layer for ingested raw data before downstream transformations.",
				"annotations": [
					"environment : dev",
					"project : retailverse",
					"phase : phase2",
					"layer : bronze",
					"purpose : validated_data_sink",
					"storage_scope : bronze_zone",
					"description : Used to copy Data from the raw-dev container and store it in the bronze container"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_bronze_sink_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_bronze_sink_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adlsgen2_retailverse_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service establishes a secure connection between Azure Data Factory and the development ADLS Gen2 account for the RetailVerse project. It is used to access the raw, bronze, and other dev-stage containers for all ingestion and transformation operations.",
				"annotations": [
					"environment : dev",
					"project : retailverse",
					"phase : phase2",
					"layer : raw stage",
					"purpose : adls access for raw files",
					"storage_scope : raw-dev",
					"description : The linked service is used to connect to the container raw-dev which stores raw files"
				],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adlsgen2_retailverse_dev_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_adlsgen2_retailverse_dev_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_retailverse_databrick')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service connecting Azure Data Factory to the RetailVerse Azure Databricks workspace for orchestrating metadata-driven Bronze layer ingestion, validation, and transformation. Enables execution of modular PySpark notebooks such as bronze_ingestion_driver as part of Phase 3 architecture. This integration facilitates schema enforcement, DQ rule application, audit logging, and quarantine processing across the RetailVerse enterprise-grade data lake.",
				"annotations": [
					"environment : dev",
					"project : RetailVerse",
					"phase : Phase3",
					"layer : bronze",
					"purpose : databricks_notebook_execution",
					"used_by_pipeline : pl_ingest_retailverse_metadata_driver",
					"description : Executes metadata-driven ingestion and validation notebooks in Databricks"
				],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4334391492508686.6.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('ls_retailverse_databrick_accessToken')]"
					},
					"existingClusterId": "[parameters('ls_retailverse_databrick_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_retailverse_metadata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service to RetailVerse metadata SQL database. Hosts control tables (metadata_control) and audit logs (audit_logs) for dynamic, schema-aware, metadata-driven ingestion pipelines in Phase 3 and beyond.\n",
				"annotations": [
					"environment : dev",
					"project : retailverse",
					"phase : bronze",
					"layer : control_metadata_audit",
					"purpose : metadata_lookup_and_audit_writeback",
					"used_by_pipeline : pl_ingest_retailverse_metadata_driver",
					"description : Provides access to metadata_control and audit_logs tables in Azure SQL for metadata-driven ingestion"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_sql_retailverse_metadata_properties_typeProperties_server')]",
					"database": "[parameters('ls_sql_retailverse_metadata_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sql_retailverse_metadata_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_sql_retailverse_metadata_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_retail_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the sink configuration for writing raw retail sales data into the bronze container under the retail_sales directory. It serves as the initial ingestion layer where data is landed with minimal validation before progressing through the medallion architecture in the RetailVerse data platform.",
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_bronze_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [
					"Sink dataset for writing raw retail sales data to bronze/retail_sales in ADLS Gen2. Forms the ingestion layer in the RetailVerse medallion architecture."
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "retail-sales/products",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_bronze_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_bronze_retailverse_parameters')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A reusable sink dataset that writes incoming data into the Bronze layer of the RetailVerse data lake. It supports dynamic resolution of the target folder and file name using parameters. This dataset supports writing multiple retail entities in a consistent, structured format into curated subdirectories under the Bronze zone.",
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_bronze_sink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [
					"owner : Sanjay",
					"dataset_role : Sink",
					"zone : Bronze",
					"project : RetailVerse",
					"description : Parameterized sink dataset for writing validated retail entity files into the bronze container in ADLS Gen2",
					"entity_type : retail_entity",
					"parameters : folder_path, file_name",
					"sink_path_pattern : bronze/{folder_path}/{file_name}",
					"data_format : DelimitedText",
					"usage : Used by pl_ingest_retailverse_entity pipeline to persist raw files to bronze layer for further cleansing and transformation."
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_bronze_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_retail_sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataset represents the source configuration for ingesting raw retail sales data from the retail_sales directory within the raw-dev container of the ADLS Gen2 storage account. It serves as the initial landing zone for unprocessed CSV files ingested into the RetailVerse data lake environment.\n\n",
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_retailverse_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [
					"Source dataset for ingesting unprocessed retail sales data (CSV format) from raw-dev/retail_sales in ADLS Gen2. Used in the batch ingestion pipeline for data lake landing."
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "retailverse_products.csv",
						"folderPath": "retail-sales/products",
						"fileSystem": "raw-dev"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_retailverse_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_raw_retailverse_parameters')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A dynamic source dataset configured to read raw retail data files from the raw-dev container in ADLS Gen2. This dataset accepts parameters folder_path and file_name, allowing it to resolve file paths at runtime and support flexible ingestion of multiple entities (e.g., customers, orders, products) through a single ADF pipeline.",
				"linkedServiceName": {
					"referenceName": "ls_adlsgen2_retailverse_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_path": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [
					"owner : Sanjay",
					"dataset_role : Source",
					"zone : Raw",
					"project : RetailVerse",
					"description : Parameterized source dataset that dynamically resolves retail entity files from raw-dev container in ADLS Gen2.",
					"entity_type : retail_entity",
					"parameters :  folder_path, file_name",
					"source_path_pattern : raw-dev/{folder_path}/{file_name}",
					"data_format : DelimitedText",
					"usage : Used by parameterized ingestion pipeline (pl_ingest_retailverse_entity) to read incoming entity data such as customers, orders, products"
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().folder_path",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adlsgen2_retailverse_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_metadata_control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Represents the metadata control table used by RetailVerse Phase 3 pipelines to retrieve entity-level ingestion configuration, including schema, DQ rules, partitioning, and source paths. Enables metadata-driven orchestration of Bronze layer ingestion and validation.",
				"linkedServiceName": {
					"referenceName": "ls_sql_retailverse_metadata",
					"type": "LinkedServiceReference"
				},
				"annotations": [
					"project : RetailVerse",
					"phase : Phase3",
					"purpose : metadata_control_source",
					"table : retailverse_metadata.metadata_control",
					"used_by_pipeline : \"pl_retailverse_bronze_ingestion_driver",
					"description : Contains ingestion metadata used by ADF to orchestrate schema-aware and DQ-enforced Bronze ingestion workflows."
				],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "entity_name",
						"type": "nvarchar"
					},
					{
						"name": "file_format",
						"type": "nvarchar"
					},
					{
						"name": "source_path",
						"type": "nvarchar"
					},
					{
						"name": "ingestion_mode",
						"type": "nvarchar"
					},
					{
						"name": "expected_schema",
						"type": "nvarchar"
					},
					{
						"name": "dq_rules",
						"type": "nvarchar"
					},
					{
						"name": "partition_column",
						"type": "nvarchar"
					},
					{
						"name": "active",
						"type": "bit"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "retailverse_metadata",
					"table": "metadata_control"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_retailverse_metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_raw_to_bronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Batch ingestion pipeline for retailverse_customers.csv from raw to bronze. File presence is validated before copy.",
				"activities": [
					{
						"name": "check_file_exists_raw",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_raw_retail_sales",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "if_file_exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "check_file_exists_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('check_file_exists_raw').output.exists\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "copy_raw_to_bronze",
									"description": "Copies retailverse_customers.csv from raw-dev to bronze zone with file presence validation.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_raw_retail_sales",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_bronze_retail_sales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"author : Sanjay",
					"env : dev",
					"type : static_batch_ingestion",
					"entity : retailverse_customers"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_retail_sales')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_retail_sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_retailverse_entity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "A reusable ingestion pipeline that accepts file metadata (folder_path, file_name) as parameters to dynamically copy data from the Raw zone to the Bronze zone of the RetailVerse data lake. This pipeline is the foundation for scalable, metadata-driven batch ingestion and enables consistent ingestion logic across all retail domains (e.g., customer, order, product).\n\n\nðŸ§  Key Features:\nâœ… Parameter-driven ingestion logic (no hardcoded datasets)\n\nâœ… Centralized ingestion logic usable by metadata controllers (Phase M3)\n\nâœ… Pre-validates source files using Get Metadata + If Condition\n\nâœ… Logs ingestion success/failure for traceability\n\n",
				"activities": [
					{
						"name": "Check_file_exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_raw_retailverse_parameters",
								"type": "DatasetReference",
								"parameters": {
									"folder_path": "@pipeline().parameters.raw_folder_path",
									"file_name": "@pipeline().parameters.raw_file_name"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check_file_exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('check_file_exists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy_raw_to_bronze",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_raw_retailverse_parameters",
											"type": "DatasetReference",
											"parameters": {
												"folder_path": "@pipeline().parameters.raw_folder_path",
												"file_name": {
													"value": "@pipeline().parameters.raw_file_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_bronze_retailverse_parameters",
											"type": "DatasetReference",
											"parameters": {
												"folder_path": "@pipeline().parameters.bronze_folder_path",
												"file_name": "@pipeline().parameters.bronze_file_name"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"raw_folder_path": {
						"type": "string"
					},
					"raw_file_name": {
						"type": "string"
					},
					"bronze_folder_path": {
						"type": "string"
					},
					"bronze_file_name": {
						"type": "string"
					}
				},
				"annotations": [
					"owner : Sanjay",
					"project : RetailVerse",
					"module_phase : M2",
					"pipeline_role : Reusable Entity Ingestion",
					"description : Reusable, parameter-driven ADF pipeline to ingest retail entity data (customers, orders, products) from Raw to Bronze layer in ADLS Gen2",
					"parameters : folder_path, file_name",
					"source_dataset : ds_raw_retailverse_parameters",
					"sink_dataset : ds_bronze_retailverse_parameters",
					"resolves_path : dynamic via parameters",
					"execution_pattern : Scheduled or metadata-driven (via controller)",
					"output_zone:  Bronze",
					"medallion_layer_target : Bronze (Zone 1)",
					"extension_ready : Yes â€“ Pluggable into Phase M3 controller",
					"observability_notes : Suitable for logging success/failure per file, supports further enhancement with status reporting and alerting",
					"resilience_features : GetMetadata + IfCondition ensures source presence validation before copy\""
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_raw_retailverse_parameters')]",
				"[concat(variables('factoryId'), '/datasets/ds_bronze_retailverse_parameters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_retailverse_entity_metadata_driver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Orchestrates metadata-driven Bronze layer ingestion for the RetailVerse platform by dynamically executing PySpark-based Databricks notebooks based on configurations stored in the metadata control table. This pipeline applies schema validation, data quality enforcement, quarantine handling, and audit logging across all active entities. Core to Phase 3's goal of scalable, decoupled, and observable ingestion architecture using Azure-native services.\n\n",
				"activities": [
					{
						"name": "lookup_active_entities",
						"description": "Fetches all active entities from the metadata control table in Azure SQL Database. Each row provides the schema, data quality rules, partitioning strategy, and source path required to orchestrate metadata-driven Bronze zone ingestion via Databricks notebooks.\n\n",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM retailverse_metadata.metadata_control WHERE  active = 1\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_metadata_control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "foreach_entity",
						"description": "Iterates through each active ingestion entity returned from the metadata table. Enables dynamic, metadata-driven execution of the bronze_ingestion_driver notebook, allowing the pipeline to process heterogeneous datasets at scale in a modular and scalable fashion.\n\n",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lookup_active_entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookup_active_entities').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Run_Ingestion_Job",
									"description": "Triggers the bronze_ingestion_driver notebook in Azure Databricks for a given entity, applying schema validation, DQ enforcement, error quarantining, and audit logging. Parameters are dynamically passed from metadata, making this execution fully decoupled and reusable.\n\n",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Workspace/Users/sanjayyadav.sy8888@gmail.com/RetailVerse-Enterprise-Azure-Data-Engineering-Platform/notebooks/phase3/bronze_ingestion_driver",
										"baseParameters": {
											"entity_name": {
												"value": "@item().entity_name",
												"type": "Expression"
											},
											"file_format": {
												"value": "@item().file_format",
												"type": "Expression"
											},
											"source_path": {
												"value": "@item().source_path",
												"type": "Expression"
											},
											"expected_schema": {
												"value": "@item().expected_schema",
												"type": "Expression"
											},
											"dq_rules": {
												"value": "@item().dq_rules",
												"type": "Expression"
											},
											"partition_column": {
												"value": "@item().partition_column",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_retailverse_databrick",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "check_error_metadata_loggable",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Run_Ingestion_Job",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Run_Ingestion_Job').status, 'Succeeded'))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "log_failure_to_audit_logs",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[retailverse_metadata].[sp_log_ingestion_failure]",
													"storedProcedureParameters": {
														"end_time": {
															"value": "",
															"type": "Datetime"
														},
														"entity_name": {
															"value": "",
															"type": "String"
														},
														"error_message": {
															"value": "",
															"type": "String"
														},
														"ingestion_status": {
															"value": "",
															"type": "String"
														},
														"run_id": {
															"value": "",
															"type": "Guid"
														},
														"start_time": {
															"value": "",
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "ls_sql_retailverse_metadata",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"environment : dev",
					"project : RetailVerse",
					"phase : Phase3",
					"layer : bronze",
					"purpose : metadata_orchestrated_bronze_ingestion",
					"ingestion_type : batch",
					"notebook_triggered : bronze_ingestion_driver",
					"metadata_source : retailverse_metadata.metadata_control",
					"audit_table : retailverse_metadata.audit_logs",
					"description : Orchestrates metadata-driven Bronze ingestion by executing Databricks notebooks with schema and DQ validation. Powers ingestion automation and observability for all active retail datasets."
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_metadata_control')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_retailverse_databrick')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_retailverse_metadata')]"
			]
		}
	]
}